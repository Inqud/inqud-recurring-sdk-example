This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-04T09:48:10.230Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  models/
    index.ts
  pages/
    CancelledPage.tsx
    ConnectWalletPage.tsx
    FailedPage.tsx
    MainPage.tsx
    NotFoundPage.tsx
    PaymentPage.tsx
    PendingPage.tsx
    RecurringMainPage.tsx
    SucessPage.tsx
  ui/
    CheckboxGroup/
      index.tsx
    Select/
      index.tsx
  utils/
    index.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
tsconfig.tsbuildinfo
vite.config.ts

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/models/index.ts
================
export enum StepNumber {
  CHECKOUT,
  PAYMENT,
  COMPLETE,
}

export enum USDTNetworkType {
  erc = 'ETHEREUM',
  trc = 'TRON',
}

export enum Status {
  NEW = 'NEW',
  REQUEST_CREATED = 'REQUEST_CREATED',
  PAYMENT_DETECTED = 'PAYMENT_DETECTED',
  EXPIRED = 'EXPIRED',
  CONFLICT = 'CONFLICT',
  SUCCESS = 'SUCCESS',
}

export enum FinalStatus {
  EXPIRED = 'EXPIRED',
  CONFLICT = 'CONFLICT',
  SUCCESS = 'SUCCESS',
}

export const FinalStatusList = [
  Status.EXPIRED,
  Status.CONFLICT,
  Status.SUCCESS,
];

export enum InternalStatus {
  default = 'default',
  unknown = 'unknown',
  success = 'success',
  failed = 'failed',
  timeout = 'timeout',
  in_progress = 'in_progress',
}

export enum CheckoutType {
  FIXED_PRICE = 'FIXED_PRICE',
  NO_PRICE = 'NO_PRICE',
}

export interface Token {
  currency: string;
  contractAddress: string;
  decimals: number;
  estimatedPayAmount?: number | undefined;
  rate?: number | undefined;
  approvalSlippagePercent?: number | undefined;
}

export interface Chain {
  blockchain: string;
  chainId: string;
  approveAddress: string;
  tokens: Token[];
}

export interface Plan {
  id: string;
  name: string;
  status: string;
  type: string;
  currency: string;
  amount: number;
  period: string;
  periodMultiplier: number;
  chains: Chain[];
}

interface Transaction {
  blockchain: string;
  currency: string;
  cryptoCurrency: string;
  amount: number;
  txCreatedAt: string;
  tx: string;
  txLink: string | null;
  createdAt: string;
  modifiedAt: string;
}

interface PaymentIntent {
  id: string;
  status: string;
  amount: number;
  transaction: Transaction;
  createdAt: string;
  modifiedAt: string;
}

interface ActiveInvoice {
  id: string;
  authorizationId: string;
  planId: string;
  clientOrderId: string | null;
  status: string;
  createdAt: string;
  modifiedAt: string;
  currency: string;
  amount: number;
  paymentIntents: PaymentIntent[];
}

interface Subscription {
  id: string;
  planId: string;
  planName: string;
  status: string;
  subStatus: string;
  clientOrderId: string | null;
  nextWriteOffAt: string | null;
  activeInvoice?: ActiveInvoice;
  createdAt: string;
}

export interface Authorization {
  id: string;
  planId: string;
  wallet: string;
  cryptoCurrency: string;
  status: string;
  subscriptionId: string;
}

export interface ConnectionData {
  subscription: Subscription;
  authorization: Authorization;
}

export enum SubscriptionStatus {
  active = 'ACTIVE',
  initiated = 'INITIATED',
  pending = 'PENDING',
  success = 'SUCCESS',
  cancelled = 'CANCELLED',
}

export enum PlanType {
  subscription = 'SUBSCRIPTION',
  onDemand = 'ON_DEMAND',
}

export enum AuthorizationStatus {
  granted = 'GRANTED',
}

export interface AuthorizationDataPayload {
  cryptoCurrency: string | undefined;
  agreementSignature?: string;
  agreementMessage?: string | undefined;
  initApprovalTx: string | undefined;
  wallet: string | undefined;
}

export interface BlockchainOptionCurrency {
  currency: string;
  contractAddress: string;
  decimals: number;
  blockchain: string;
  chainId: string;
  approveAddress: string;
  estimatedPayAmount?: number | undefined;
  rate?: number | undefined;
  approvalSlippagePercent?: number | undefined;
}

export interface BlockchainOption {
  network: string;
  chainId: string;
  currencies: BlockchainOptionCurrency[];
}

export interface BlockchainOptions {
  [key: string]: BlockchainOption;
}

export enum RecurringState {
  notConnected,
  connected,
  noAuthSubscription,
  authNoSubscription,
  active,
  pending,
  cancelled,
  failed,
}

export const periodMap: any = {
  minutely: 'minutes',
  hourly: 'hours',
  daily: 'days',
  weekly: 'weeks',
  monthly: 'months',
  yearly: 'years',
};

export const hexadecimalToDecimal = (
  hexadecimal: string | undefined
): number | string | undefined => {
  if (!hexadecimal || typeof hexadecimal !== 'string') {
    return hexadecimal;
  }

  if (hexadecimal.startsWith('0x')) {
    hexadecimal = hexadecimal.slice(2);
  }
  return parseInt(hexadecimal, 16);
};

export type BalanceData =
  | {
      decimals: number;
      formatted: string;
      symbol: string;
      value: bigint;
    }
  | undefined;

================
File: src/pages/CancelledPage.tsx
================
import * as React from 'react';
import { Box, Typography, SvgIcon } from '@mui/material';
import CancelIcon from '@mui/icons-material/Cancel';
import { useRecurringData } from 'inqud-recurring-api';
import { formatNumber } from '../utils';

interface ICancelledPageProps {
  mobile?: boolean;
}

const CancelledPage: React.FunctionComponent<ICancelledPageProps> = () => {
  const { plan } = useRecurringData();

  return (
    <Box
      display="flex"
      flexDirection="column"
      alignItems="center"
      justifyContent="center"
      height="100%"
      padding={2}
    >
      <Box mb={2}>
        <SvgIcon
          component={CancelIcon}
          sx={{ fontSize: 64, color: '#F45C3B' }}
        />
      </Box>

      <Box
        display="flex"
        alignItems="center"
        justifyContent="center"
        paddingX={2}
        paddingY={1}
        bgcolor="rgba(244, 92, 59, 0.2)"
        borderRadius="108px"
        mb={3}
      >
        <CancelIcon sx={{ fontSize: 32, color: '#F45C3B' }} />
        <Typography
          variant="h6"
          fontWeight="bold"
          sx={{ color: '#F45C3B', ml: 1 }}
        >
          Cancelled
        </Typography>
      </Box>

      {plan && (
        <Typography
          variant="h5"
          fontWeight="bold"
          color="textPrimary"
          textAlign="center"
          mt={2}
        >
          {formatNumber(plan.amount)} {plan.currency}
        </Typography>
      )}

      {/* Cancellation Message */}
      <Typography
        variant="body2"
        color="textSecondary"
        textAlign="center"
        mt={1}
      >
        Subscription cancelled.
      </Typography>
    </Box>
  );
};

export default CancelledPage;

================
File: src/pages/ConnectWalletPage.tsx
================
import React from 'react';
import {
  Box,
  Button,
  Typography,
} from '@mui/material';
import {
  useRecurringData,
  ConnectButtonComponent,
} from 'inqud-recurring-api';
import { isEmpty, values } from 'lodash';
import CheckboxGroup from "../ui/CheckboxGroup";
import CustomSelect from "../ui/Select";

interface IPlanPageProps {
  mobile?: boolean;
  className?: string;
}

const ConnectWalletPage: React.FunctionComponent<IPlanPageProps> = ({
  mobile = false,
  className,
}) => {
  const {
    setCurrency,
    setSelectedNetwork,
    selectedNetwork,
    currency,
    plan,
    loading,
    error,
    networks,
  } = useRecurringData();

  return (
    <Box
      display="flex"
      flexDirection="column"
      height="100%"
      className={className}
      padding={2}
    >
      {/* Select Network */}
      <Box display="flex" flexDirection="column" mb={mobile ? 4 : 6}>
        <Typography
          variant="caption"
          fontWeight="bold"
          color="textSecondary"
          mb={1}
        >
          Select network
        </Typography>
        <Box>
          <CheckboxGroup
            networks={values(networks)}
            radio
            selectedNetwork={selectedNetwork}
            onChange={setSelectedNetwork}
          />
        </Box>
      </Box>

      {/* Select Currency */}
      {selectedNetwork && (
        <Box display="flex" flexDirection="column" mb={3}>
          <Typography
            variant="caption"
            fontWeight="bold"
            color="textSecondary"
            mb={1}
          >
            Select currency
          </Typography>
          <CustomSelect
            currencies={selectedNetwork?.currencies}
            selectedCurrency={currency}
            onSelect={setCurrency}
            disabled={!!error}
          />
        </Box>
      )}

      {/* No Active Payment Methods */}
      {plan && isEmpty(plan?.chains) && (
        <Typography variant="body2" color="textSecondary">
          No active payment methods
        </Typography>
      )}

      {/* Connect Wallet Button */}
      <Box mt="auto">
        <ConnectButtonComponent.Custom>
          {({ openConnectModal }: any) => (
            <Button
              variant="contained"
              color="primary"
              fullWidth
              onClick={openConnectModal}
              disabled={loading}
            >
              {loading ? 'Loading...' : 'Connect Wallet'}
            </Button>
          )}
        </ConnectButtonComponent.Custom>
      </Box>
    </Box>
  );
};

export default ConnectWalletPage;

================
File: src/pages/FailedPage.tsx
================
import * as React from 'react';
import { Box, Typography, SvgIcon } from '@mui/material';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import WarningAmberIcon from '@mui/icons-material/WarningAmber';
import { useRecurringData } from 'inqud-recurring-api';
import { formatNumber } from '../utils';

interface IFailedCardProps {}

const FailedCard: React.FunctionComponent<IFailedCardProps> = () => {
  const { plan, error } = useRecurringData();

  return (
    <Box
      display="flex"
      flexDirection="column"
      alignItems="center"
      justifyContent="center"
      height="100%"
      padding={2}
    >
      <Box mb={3}>
        <SvgIcon
          component={ErrorOutlineIcon}
          color="error"
          sx={{ fontSize: 64 }}
        />
      </Box>

      <Box
        display="flex"
        alignItems="center"
        justifyContent="center"
        paddingX={2}
        paddingY={1}
        bgcolor="rgba(244, 92, 59, 0.2)"
        borderRadius="108px"
        mb={3}
      >
        <WarningAmberIcon sx={{ fontSize: 32, color: '#F45C3B' }} />
        <Typography variant="h6" fontWeight="bold" color="error" ml={1}>
          Failed
        </Typography>
      </Box>

      <Typography
        variant="body1"
        fontWeight="bold"
        color="error"
        textAlign="center"
        mt={2}
      >
        {error || 'An unknown error occurred'}
      </Typography>

      {plan && (
        <>
          <Typography
            variant="body1"
            fontWeight="bold"
            color="textPrimary"
            mt={3}
          >
            {formatNumber(plan.amount)} {plan.currency}
          </Typography>
          <Typography
            variant="body2"
            color="textSecondary"
            textAlign="center"
            mt={1}
          >
            Please contact support for additional information.
          </Typography>
        </>
      )}
    </Box>
  );
};

export default FailedCard;

================
File: src/pages/MainPage.tsx
================
import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import RecurringPage from './RecurringMainPage.tsx';
import NotFoundPage from './NotFoundPage.tsx';

const router = createBrowserRouter([
  {
    path: '/plans/:id',
    element: <RecurringPage />,
  },
  {
    path: '*',
    element: <NotFoundPage />,
  },
]);

export const MainPage: React.FC = () => {
  return <RouterProvider router={router} />;
};

================
File: src/pages/NotFoundPage.tsx
================
import * as React from 'react';
import { Box, Typography, Card } from '@mui/material';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';

interface INotFoundPageProps {}

const NotFoundPage: React.FunctionComponent<INotFoundPageProps> = () => {
  return (
    <Box
      display="flex"
      flexDirection="column"
      alignItems="center"
      justifyContent="center"
      minHeight="100vh"
      padding={2}
    >
      <Card
        sx={{
          padding: 4,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          boxShadow: 3,
        }}
      >
        <ErrorOutlineIcon
          sx={{ fontSize: 64, color: '#F45C3B', marginBottom: 2 }}
        />
        <Typography variant="h6" fontWeight="bold" color="textPrimary">
          Page not found
        </Typography>
      </Card>
    </Box>
  );
};

export default NotFoundPage;

================
File: src/pages/PaymentPage.tsx
================
import React from 'react';
import {
  Box,
  Button,
  Grid,
  TextField,
  Tooltip,
  Typography,
  IconButton,
} from '@mui/material';
import InfoIcon from '@mui/icons-material/Info';
import { formatNumber, shortenWithDotsBetween } from '../utils';
import { useRecurringData } from 'inqud-recurring-api';
import {values} from "lodash";
import CheckboxGroup from "../ui/CheckboxGroup";
import Select from "../ui/Select";
import CustomSelect from "../ui/Select";

interface IConnectPageProps {
  address?: string;
  className?: string;
}

const PaymentPage: React.FunctionComponent<IConnectPageProps> = ({
  className,
}) => {
  const {
    setCurrency,
    setSelectedNetwork,
    noNetwork,
    selectedNetwork,
    currency,
    plan,
    address,
    disconnect,
    error,
    setLimit,
    handlePayClick,
    isSubscription,
    duration,
    setDuration,
    networks,
    balanceData,
    limitFormatted,
    noBalance,
  } = useRecurringData();

  return (
    <Box
      display="flex"
      flexDirection="column"
      height="100%"
      className={className}
    >
      <Box mb={2}>
        {address && (
          <Box mb={2}>
            <Typography variant="subtitle2">Wallet address</Typography>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              border="1px solid rgba(0, 0, 0, 0.2)"
              borderRadius={1}
              padding={1}
            >
              <Typography>{shortenWithDotsBetween(address, 20)}</Typography>
              <Button color="success" onClick={disconnect}>
                Disconnect
              </Button>
            </Box>
          </Box>
        )}

        {noNetwork && plan && (
          <Box
            display="flex"
            alignItems="center"
            bgcolor="rgba(244, 105, 59, 0.2)"
            borderRadius={1}
            padding={1}
            mt={2}
            mb={2}
          >
            <InfoIcon fontSize="small" style={{ color: '#F4693B' }} />
            <Typography variant="body2" color="error" ml={1}>
              Network is not supported
            </Typography>
          </Box>
        )}
      </Box>

      <Box mb={4}>
        <Typography variant="subtitle2" gutterBottom>
          Select network
        </Typography>
        <CheckboxGroup
          networks={values(networks)}
          radio
          selectedNetwork={selectedNetwork}
          onChange={setSelectedNetwork}
        />
      </Box>

      {currency && (
        <Box mb={2}>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="subtitle2">Your wallet balance</Typography>
            <Typography variant="body2">
              {balanceData?.formatted
                ? `${balanceData.formatted} ${currency?.currency}`
                : ''}
            </Typography>
          </Box>
        </Box>
      )}

      {plan && selectedNetwork && (
        <Box display="flex" flexDirection="column" mb={3}>
          <Typography
            variant="caption"
            fontWeight="bold"
            color="textSecondary"
            mb={1}
          >
            Select currency
          </Typography>
          <CustomSelect
            currencies={selectedNetwork?.currencies}
            selectedCurrency={currency}
            onSelect={setCurrency}
            disabled={!!error}
          />
        </Box>
      )}

      {noBalance && (
        <Box
          display="flex"
          alignItems="center"
          bgcolor="rgba(244, 105, 59, 0.2)"
          borderRadius={1}
          padding={1}
          mt={2}
          mb={2}
        >
          <InfoIcon fontSize="small" style={{ color: '#F4693B' }} />
          <Typography variant="body2" color="error" ml={1}>
            Your balance is not enough
          </Typography>
        </Box>
      )}

      {isSubscription && (
        <>
          <Grid container spacing={2} alignItems="center" mb={2}>
            <Grid item xs={7}>
              <TextField
                label={`Spending limit ${
                  currency?.currency ? `(${currency.currency})` : ''
                }`}
                value={isSubscription ? limitFormatted : '∞'}
                onChange={(e) => setLimit(e.target.value)}
                fullWidth
              />
            </Grid>
            <Grid item xs={5}>
              <TextField
                label="Duration"
                type="number"
                value={duration}
                onChange={(e) => setDuration(Number(e.target.value))}
                fullWidth
              />
            </Grid>
          </Grid>

          <Box mb={2}>
            <Typography variant="subtitle2">Total amount to pay</Typography>
            <Box display="flex" alignItems="center">
              <Typography variant="h4">
                ~
                {formatNumber(
                  plan?.amount * (currency?.rate || 0),
                  currency?.decimals
                )}
              </Typography>
              <Typography variant="h6" ml={1}>
                {currency?.currency}
              </Typography>
              <Tooltip
                title="The final amount may be subject to slight variations."
                arrow
              >
                <IconButton>
                  <InfoIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>
        </>
      )}

      <Box mt="auto" pt={4}>
        <Button
          variant="contained"
          color="primary"
          fullWidth
          disabled={(!currency && !selectedNetwork) || noBalance}
          onClick={handlePayClick}
          sx={{ height: '48px' }}
        >
          {isSubscription ? 'Pay and Subscribe' : 'Allow Spending'}
        </Button>
      </Box>
    </Box>
  );
};

export default PaymentPage;

================
File: src/pages/PendingPage.tsx
================
import * as React from 'react';
import { Box, Typography, SvgIcon } from '@mui/material';
import HourglassEmptyIcon from '@mui/icons-material/HourglassEmpty';
import { useRecurringData } from 'inqud-recurring-api';
import { formatNumber } from '../utils';

interface IPendingPageProps {
  mobile?: boolean;
}

const PendingPage: React.FunctionComponent<IPendingPageProps> = () => {
  const { plan } = useRecurringData();

  return (
    <Box
      display="flex"
      flexDirection="column"
      alignItems="center"
      justifyContent="center"
      height="100%"
      padding={2}
    >
      <Box mb={2}>
        <SvgIcon
          component={HourglassEmptyIcon}
          sx={{ fontSize: 64, color: '#FBA603' }}
        />
      </Box>

      <Box
        display="flex"
        alignItems="center"
        justifyContent="center"
        paddingX={2}
        paddingY={1}
        bgcolor="rgba(251, 166, 3, 0.2)"
        borderRadius="108px"
        mb={3}
      >
        <HourglassEmptyIcon sx={{ fontSize: 32, color: '#FBA603' }} />
        <Typography
          variant="h6"
          fontWeight="bold"
          sx={{ color: '#FBA603', ml: 1 }}
        >
          Pending
        </Typography>
      </Box>

      {plan && (
        <Typography
          variant="h5"
          fontWeight="bold"
          color="textPrimary"
          textAlign="center"
          mt={2}
        >
          {formatNumber(plan.amount)} {plan.currency}
        </Typography>
      )}

      <Typography
        variant="body2"
        color="textSecondary"
        textAlign="center"
        mt={1}
      >
        Waiting for payment to be processed
      </Typography>
    </Box>
  );
};

export default PendingPage;

================
File: src/pages/RecurringMainPage.tsx
================
import { useLocation, useParams } from 'react-router-dom';
import React from 'react';
import { Box, CircularProgress } from '@mui/material';
import { RecurringState } from '../models';
import { RecurringDataProvider, useRecurringData } from 'inqud-recurring-api';
import PaymentPage from './PaymentPage.tsx';
import ConnectWalletPage from './ConnectWalletPage.tsx';
import SuccessPage from './SucessPage';
import FailedPage from './FailedPage';
import PendingPage from './PendingPage';
import CancelledPage from './CancelledPage';

const LoadingOverlay = () => (
  <Box
    sx={{
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(255, 255, 255, 0.8)',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: 10,
      borderRadius: '16px',
    }}
  >
    <CircularProgress />
  </Box>
);

const RecurringMainPage: React.FC<{}> = () => {
  const { state, loading } = useRecurringData();

  return (
    <Box
      display="flex"
      flexDirection="column"
      alignItems="center"
      justifyContent="flex-start"
      py={3}
      minHeight="100vh"
    >
      <Box display="flex" flexDirection="column" my="auto">
        <Box position="relative">
          {loading && <LoadingOverlay />}
          <Box
            sx={{
              width: 423,
              minWidth: 423,
              minHeight: 300,
              borderRadius: '16px',
              position: 'relative',
            }}
          >
            {
              {
                [RecurringState.notConnected]: <ConnectWalletPage />,
                [RecurringState.connected]: <PaymentPage />,
                [RecurringState.noAuthSubscription]: <PaymentPage />,
                [RecurringState.authNoSubscription]: <PaymentPage />,
                [RecurringState.active]: <SuccessPage />,
                [RecurringState.failed]: <FailedPage />,
                [RecurringState.pending]: <PendingPage />,
                [RecurringState.cancelled]: <CancelledPage />,
              }[state as number]
            }
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

const RecurringPageWithContext: React.FC<{}> = () => {
  const { id } = useParams();
  const query = new URLSearchParams(useLocation().search);
  const clientOrderId = query.get('orderId');

  return (
    <RecurringDataProvider
      planId={id} // recurring plan ID
      clientOrderId={clientOrderId} // client order ID
      projectId="TODO" // your wallet connect project ID
      baseUrl="https://api.inqud.com/"
    >
      <RecurringMainPage />
    </RecurringDataProvider>
  );
};

export default RecurringPageWithContext;

================
File: src/pages/SucessPage.tsx
================
import * as React from 'react';
import { Box, Typography, SvgIcon, Button } from '@mui/material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import { useRecurringData } from 'inqud-recurring-api';
import { formatNumber } from '../utils';

interface ISuccessPageProps {
  mobile?: boolean;
}

const SuccessPage: React.FunctionComponent<ISuccessPageProps> = () => {
  const { plan, disconnect } = useRecurringData();

  return (
    <Box
      display="flex"
      flexDirection="column"
      alignItems="center"
      justifyContent="center"
      height="100%"
      padding={2}
    >
      <Box mb={2}>
        <SvgIcon
          component={CheckCircleIcon}
          sx={{ fontSize: 64, color: '#077453' }}
        />
      </Box>

      <Box
        display="flex"
        alignItems="center"
        justifyContent="center"
        paddingX={2}
        paddingY={1}
        bgcolor="rgba(11, 119, 83, 0.2)"
        borderRadius="108px"
        mb={3}
      >
        <CheckCircleIcon sx={{ fontSize: 32, color: '#077453' }} />
        <Typography
          variant="h6"
          fontWeight="bold"
          sx={{ color: '#077453', ml: 1 }}
        >
          Success
        </Typography>
      </Box>

      <Typography
        variant="h5"
        fontWeight="bold"
        color="textPrimary"
        textAlign="center"
        mt={2}
      >
        Subscription is active
      </Typography>
      {plan && (
        <>
          <Typography
            variant="h5"
            fontWeight="bold"
            color="textPrimary"
            textAlign="center"
            mt={2}
          >
            {formatNumber(plan.amount)} {plan.currency}
          </Typography>
          <Typography
            variant="body2"
            color="textSecondary"
            textAlign="center"
            mt={1}
          >
            You allowed spending of {formatNumber(plan.amount)} {plan.currency}
          </Typography>
        </>
      )}

      <Box mt={4} width="100%">
        <Button
          variant="outlined"
          color="primary"
          fullWidth
          onClick={() => disconnect()}
        >
          Disconnect Wallet
        </Button>
      </Box>
    </Box>
  );
};

export default SuccessPage;

================
File: src/ui/CheckboxGroup/index.tsx
================
import * as React from "react";
import { Checkbox, FormControlLabel, Box } from "@mui/material";
import { BlockchainOption } from "../../models";

interface ICheckboxGroupProps {
  networks: BlockchainOption[];
  selectedNetwork?: BlockchainOption;
  onChange?: (network: BlockchainOption) => void;
  radio?: boolean;
  className?: string;
}

const CheckboxGroup: React.FunctionComponent<ICheckboxGroupProps> = ({
     networks,
     selectedNetwork,
     onChange = () => {},
     radio = false,
     className,
   }) => {
  const handleChange = (value: BlockchainOption) => () => {
    onChange(value);
  };

  return (
    <Box
      display="flex"
      flexWrap="wrap"
      gap={2}
      className={className}
    >
      {networks.map((network) => (
        <FormControlLabel
          key={network.network}
          control={
            <Checkbox
              checked={selectedNetwork?.network === network.network}
              onChange={handleChange(network)}
              value={network.network}
            />
          }
          label={
            network?.network.length > 3
              ? network?.network.charAt(0)?.toUpperCase() + network?.network.slice(1)?.toLowerCase()
              : network.network
          }
        />
      ))}
    </Box>
  );
};

export default CheckboxGroup;

================
File: src/ui/Select/index.tsx
================
import React from "react";
import { Select, MenuItem, FormControl, InputLabel, Box } from "@mui/material";
import { BlockchainOptionCurrency } from "../../models";

interface Props {
  selectedCurrency?: BlockchainOptionCurrency;
  currencies: BlockchainOptionCurrency[];
  onSelect?: (currency: BlockchainOptionCurrency) => void;
  disabled?: boolean;
  label?: string;
}

const CustomSelect: React.FC<Props> = ({
     selectedCurrency,
     currencies,
     onSelect = () => {},
     disabled = false,
     label = "Select Currency",
   }) => {

  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    const selected = currencies.find((currency) => currency.currency === event.target.value);
    if (selected) {
      onSelect(selected);
    }
  };

  return (
    <Box>
      <FormControl fullWidth disabled={disabled}>
        <InputLabel>{label}</InputLabel>
        <Select
          value={selectedCurrency?.currency || ""}
          onChange={handleChange}
          label={label}
          sx={{
            backgroundColor: "white",
            borderRadius: 1,
          }}
        >
          {currencies.map((currency) => (
            <MenuItem key={currency.currency} value={currency.currency}>
              {currency.currency}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    </Box>
  );
};

export default CustomSelect;

================
File: src/utils/index.ts
================
import { has, reduce, ceil, map } from 'lodash';
import { Chain, BlockchainOptions } from '../models';

export const noop = () => undefined;

export const formatNumber = (x: number | undefined, d = 5) => {
  if (x === undefined || x === null) return '';
  var parts = ceil(x, d)?.toString()?.split('.');
  parts[0] = parts[0]?.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
  return parts?.join('.');
};

export const shortenWithDotsBetween = (
  str: string | undefined = '',
  maxLength: number
) => {
  if (str?.length <= maxLength) return str;
  const firstPart = str?.slice(0, maxLength / 2);
  const secondPart = str?.slice(-maxLength / 2);
  return `${firstPart}...${secondPart}`;
};

export const getOptionsFromChains = (
  data: Chain[] | undefined
): BlockchainOptions => {
  return reduce(
    data,
    (acc: BlockchainOptions, item: Chain) => {
      if (has(acc, item.blockchain)) {
        return acc;
      }

      return {
        ...acc,
        [item.blockchain]: {
          network: item.blockchain,
          chainId: item.chainId,
          currencies: map(item.tokens, (token) => ({ ...token, ...item })),
        },
      };
    },
    {}
  );
};

export const timerValue = 60;
export const maxDurationCount = 36;

================
File: src/App.tsx
================
import { useState } from 'react';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';

function App() {
  const [count, setCount] = useState(0);

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.tsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  );
}

export default App;

================
File: src/index.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/main.tsx
================
import { createRoot } from 'react-dom/client';
import React from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import NotFoundPage from './pages/NotFoundPage';
import {MainPage} from "./pages/MainPage.tsx";

createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <ErrorBoundary fallback={<NotFoundPage />}>
      <MainPage />
    </ErrorBoundary>
  </React.StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist', 'src'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    rules: {},
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.13.5",
    "@emotion/styled": "^11.13.5",
    "@mui/icons-material": "^6.1.9",
    "@mui/material": "^6.1.9",
    "inqud-recurring-api": "^1.0.6",
    "lodash": "^4.17.21",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-error-boundary": "^4.1.2",
    "react-router-dom": "^7.0.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/lodash": "^4.17.13",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.15.0",
    "vite": "^6.0.1",
    "vite-plugin-checker": "^0.8.0"
  }
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "noEmitOnError": false,  // This disables emitting files when there are errors
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true, // TypeScript will not emit any files during build
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: tsconfig.tsbuildinfo
================
{"root":["./src/app.tsx","./src/main.tsx","./src/vite-env.d.ts","./src/models/index.ts","./src/pages/cancelledpage.tsx","./src/pages/connectpage.tsx","./src/pages/failedpage.tsx","./src/pages/notfoundpage.tsx","./src/pages/pendingpage.tsx","./src/pages/planpage.tsx","./src/pages/recurringmainpage.tsx","./src/pages/sucesspage.tsx","./src/utils/index.ts"],"version":"5.6.3"}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
  ],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, 'src'),
    },
  },
  server: {
    port: 8080,
  },
});
